plugins {
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.0.7'
    id 'application'
    id 'org.beryx.jlink' version '2.19.0'
    id "de.undercouch.download" version "3.4.3"
}

import org.gradle.internal.os.OperatingSystem;

group 'procul.studios'
version '0.0.4'

javafx {
    modules = [ 'javafx.controls' , 'javafx.graphics']
}

compileJava {
    sourceCompatibility = 13
    targetCompatibility = 13
}

ext {
    appName = "ProcelioLauncher"
    appLauncher = "procelioLauncher"
    appPackaging = "procelioLauncher"
    appModuleName = "ps.ProcelioLauncher"
    appMainClass = "procul.studios.ProcelioLauncher"
    mainClassName = "${ext.appModuleName}/${ext.appMainClass}"

    description = "Play and Update Procelio"

    icon = "build/resources/main/icon"
    if (OperatingSystem.current().isWindows()) {
        icon += ".ico"
    } else {
        icon += ".png"
    }
    vendor = "Procul Studios"
    category = 'Game'

    moduleCompile = false
}

repositories {
    mavenCentral()
}

dependencies {
    //Binary Diffing Library
    compile group: 'io.sigpipe', name:'jbsdiff', version: '1.0'

    //POJOs
    compile project(":ProcelioDelta")

    compile project(":ProcelioCommon")

    //Making HTTP Requests
    compile group: 'com.mashape.unirest', name: 'unirest-java', version: '1.4.9'

    //Unit Testing
    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile group: 'net.harawata', name: 'appdirs', version: '1.0.3'
}

jar {
    baseName = 'ProcelioLauncher'
    classifier = null
    version = null
    manifest {
        attributes 'Main-Class': "procul.studios.ProcelioLauncher"
    }
}

jlink {
    imageZip = project.file("${buildDir}/distributions/${appPackaging}-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = "${appLauncher}"
    }
}

task downloadPackager(type: Download) {
    if(OperatingSystem.current().isWindows()) {
        src 'http://download2.gluonhq.com/jpackager/11/jdk.packager-windows.zip'
    } else if(OperatingSystem.current().isLinux()) {
        src 'http://download2.gluonhq.com/jpackager/11/jdk.packager-linux.zip'
    } else {
        throw new GradleException('Unsupported Operating System')
    }
    dest file(buildDir.path + "/jpackager/javapackager.zip")
    overwrite false
}

task unzipPackager(dependsOn: downloadPackager, type: Copy) {
    from zipTree(downloadPackager.dest)
    into buildDir.path + '/jpackager/'
}

task jPackager(dependsOn: unzipPackager) {
    dependsOn project.tasks.getByName("jlink")
    def outputDir = buildDir.path + "/image/package"
    outputs.dir outputDir
    def binary = unzipPackager.destinationDir.path + "/jpackager"
	logger.warn(binary);
    def nativeType
    if(OperatingSystem.current().isWindows()) {
        nativeType = 'msi'
    } else if(OperatingSystem.current().isLinux()) {
        nativeType = 'deb'
    } else {
        throw new GradleException('Unsupported Operating System')
    }

    doLast {
        exec {
            executable binary
            args = [
                    'create-installer', nativeType,
                    '--runtime-image', jlink.imageDir.get(),
                    '--verbose',
                    '--output', outputDir,
                    '--name', project.ext.appName,
                    '-m', project.ext.mainClassName,
                    '--version', project.version,
                    '--icon', project.ext.icon
            ]
        }
    }
}

task makeExe(dependsOn: unzipPackager) {
    dependsOn project.tasks.getByName("jlink")
    def outputDir = buildDir.path + "/image/package"
    outputs.dir outputDir
    def nativeType
    if(OperatingSystem.current().isWindows()) {
        nativeType = 'msi'
    } else if(OperatingSystem.current().isLinux()) {
        nativeType = 'deb'
    } else {
        throw new GradleException('Unsupported Operating System')
    }

    doLast {
        exec {
            executable 'jpackage'
            args = [
			    '-t', 'app-image' ,
				'--input', 'build/resources',
				'--runtime-image', jlink.imageDir.get(),
                '--dest', 'jpckg',
				'--module', project.ext.mainClassName
            ]
        }
    }
}

run {
    inputs.property("moduleName", moduleName)
    doFirst {
        println "ABC " + mainClassName
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--module', mainClassName
        ]
        classpath = files()
    }
}